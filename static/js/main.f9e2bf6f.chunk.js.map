{"version":3,"sources":["api/axios-instance.js","redux/weatherData.js","ui/ButtonSource.js","ui/Form.js","ui/Weather.js","ui/Info.js","redux/selectors.js","ui/WeatherApp.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["API","city","key","axios","get","initialState","status","selected","OpenWeatherMap","API_KEY","data","temp","undefined","pressure","humidity","windSpeed","Weatherbit","weatherData","state","action","type","value","newData","SourceButton","styled","div","props","Form","useState","selectedFirst","setSelectedFirst","selectedSecond","setSelectedSecond","useEffect","className","name","placeholder","onChange","e","changeCity","currentTarget","onClick","getWeatherFromOpenWeatherMap","getWeatherFromWeatherbit","alert","changeSelected","Info","Weather","getData","connect","dispatch","getState","a","res","Math","round","main","wind","speed","response","message","pres","rh","wind_spd","App","Boolean","window","location","hostname","match","combinedReducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9e2bf6f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const API = {\r\n    getWeatherFromWeatherbitAPI (city, key) {\r\n        return(\r\n            axios.get(`https://api.weatherbit.io/v2.0/current?city=${city}&key=${key}`)\r\n        )\r\n    },\r\n    getWeatherFromOpenWeatherMapAPI(city, key){\r\n        return(\r\n            axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${key}`)\r\n        )\r\n    }\r\n}","\r\nimport { API } from \"../api/axios-instance\";\r\n\r\nconst CHANGE_CITY = 'WD/CHANGE_CITY';\r\nconst SET_WEATHER_FROM_OWN = 'WD/SET_WEATHER_FROM_OWN';\r\nconst SET_WEATHER_FROM_WEATHER_BIT = 'SET_WEATHER_FROM_WEATHER_BIT';\r\nconst CHANGE_SELECTED = 'WD/CHANGE_SELECTED';\r\n\r\n\r\nlet initialState = {\r\n\r\n    status: 'not_init',\r\n    city: '',\r\n    selected: 'OpenWeatherMap',\r\n\r\n    OpenWeatherMap: {\r\n        API_KEY: '1ae16df993c07c547ccd1942b3965093', \r\n        data:{\r\n            temp: undefined,\r\n            pressure: undefined,\r\n            humidity: undefined,\r\n            windSpeed: undefined,\r\n        },\r\n    },\r\n    Weatherbit: {\r\n        API_KEY: '52179b72c8b24feabe273665f8d40b68',\r\n        data: {\r\n            temp: undefined,\r\n            pressure: undefined,\r\n            humidity: undefined,\r\n            windSpeed: undefined,\r\n        },\r\n    },\r\n}\r\n\r\n\r\nexport const changeCity = (value) =>({ type: CHANGE_CITY, value: value});\r\nexport const changeSelected = (value) =>({ type: CHANGE_SELECTED, value: value});\r\n\r\nexport const setWeatherFromOWM = (temp, pressure, humidity, windSpeed) => ({ type: SET_WEATHER_FROM_OWN, \r\n    temp: temp,\r\n    pressure: pressure,\r\n    humidity: humidity,\r\n    windSpeed: windSpeed,\r\n});\r\nexport const setWeatherFromWeatherbit = (temp, pressure, humidity, windSpeed) => ({ type: SET_WEATHER_FROM_WEATHER_BIT, \r\n    temp: temp,\r\n    pressure: pressure,\r\n    humidity: humidity,\r\n    windSpeed: windSpeed,\r\n});\r\n\r\nconst weatherData = (state = initialState, action) => {\r\n    switch (action.type) {\r\n            case CHANGE_CITY: {\r\n                return {...state, city: action.value}\r\n            }\r\n            case SET_WEATHER_FROM_OWN: {\r\n                let newData = {\r\n                    temp: action.temp,\r\n                    pressure: action.pressure,\r\n                    humidity: action.humidity,\r\n                    windSpeed: action.windSpeed,\r\n                };\r\n                return{\r\n                    ...state, OpenWeatherMap:{...state.OpenWeatherMap, data: newData}\r\n                }\r\n            }\r\n            case SET_WEATHER_FROM_WEATHER_BIT: {\r\n                let newData = {\r\n                    temp: action.temp,\r\n                    pressure: action.pressure,\r\n                    humidity: action.humidity,\r\n                    windSpeed: action.windSpeed,\r\n                };\r\n                return{\r\n                    ...state, Weatherbit:{...state.Weatherbit, data: newData}\r\n                }\r\n            }\r\n            case CHANGE_SELECTED: {\r\n                return {...state, selected: action.value}\r\n            }\r\n\r\n        default: return state\r\n    }\r\n}   \r\n\r\n\r\n\r\nexport const getWeatherFromOpenWeatherMap = () => async(dispatch, getState) => {\r\n    try {\r\n    let state = getState();\r\n    const res = await API.getWeatherFromOpenWeatherMapAPI(state.data.city, state.data.OpenWeatherMap.API_KEY)\r\n    dispatch(setWeatherFromOWM(Math.round(res.data.main.temp-273), res.data.main.pressure, res.data.main.humidity,res.data.wind.speed))\r\n} catch(error) {\r\n    alert(error.response.data.message)\r\n} }\r\n\r\nexport const getWeatherFromWeatherbit = () => async(dispatch, getState) => {\r\n\r\n    let state = getState();\r\n    const res = await API.getWeatherFromWeatherbitAPI(state.data.city, state.data.Weatherbit.API_KEY)\r\n    if (res.data) {\r\n    let data = res.data.data[0];\r\n    dispatch(setWeatherFromWeatherbit(Math.round(data.temp), data.pres, data.rh, data.wind_spd))}\r\n}\r\n\r\n\r\nexport default weatherData;","import styled from 'styled-components';\r\n\r\n\r\nlet SourceButton = styled.div`\r\n\r\nheight:32px;\r\nbackground-color: ${props => props.selected ? '#1C186E' : '#3B3DB5'}; \r\ntext-align: center;\r\nfont-size: 16px;\r\nborder: solid 1px black;\r\nwidth: 200px;\r\ncursor: ${props => props.selected ? 'default' : 'pointer'};\r\ncolor: white;\r\nline-height:32px;\r\nmargin-right: 10px;\r\n:hover{\r\n    background-color: #2E308E;\r\n}`\r\n\r\nexport default SourceButton;","import React, {useState, useEffect} from \"react\";\r\nimport \"./../App.css\"\r\nimport SourceButton from \"./ButtonSource\";\r\n\r\nlet Form = (props) =>{\r\n\r\n    let [selectedFirst, setSelectedFirst] = useState(false)\r\n    let [selectedSecond, setSelectedSecond] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        if (props.selected === 'OpenWeatherMap' && props.temp) {\r\n            setSelectedFirst(true)\r\n        }\r\n    }, [props.temp])\r\n\r\n    let onSelectedOWM = () => {\r\n        props.changeSelected('OpenWeatherMap');\r\n        setSelectedFirst(true);\r\n        setSelectedSecond(false)\r\n    } \r\n\r\n    let onSelectedWB = () => {\r\n        props.changeSelected('Weatherbit');\r\n        setSelectedFirst(false);\r\n        setSelectedSecond(true)\r\n    } \r\n\r\n    let updateCityText = (e) =>{\r\n        props.changeCity(e.currentTarget.value)\r\n    }\r\n\r\n    let getWeathet = () => {\r\n        if (props.city){\r\n        props.getWeatherFromOpenWeatherMap();\r\n        props.getWeatherFromWeatherbit();\r\n    } else {alert('enter city')}\r\n}\r\n\r\n    return(\r\n        <form className=\"formWeath\">\r\n            <input type=\"text\" name=\"city\" placeholder=\"city\" value={props.city} onChange={updateCityText}/>\r\n            <button type=\"button\" onClick={getWeathet}>Get weather</button>\r\n                 <div className=\"source\">\r\n                     <div className=\"sourceText\"> \r\n                         Weather source:\r\n                    </div>\r\n                 <div className=\"sourceButton\">\r\n                 <SourceButton selected={selectedFirst} onClick={onSelectedOWM}>Open Weather Map</SourceButton>\r\n                 <SourceButton selected={selectedSecond} onClick={onSelectedWB}>Weather Bit</SourceButton>\r\n                 </div>\r\n\r\n                 </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./../App.css\"\r\n\r\nlet Info = (props) =>{\r\n\r\n    return(<>\r\n       { props.data.temp && <div className=\"infoWeath\"> \r\n            <p>temperature: {props.data.temp}</p>\r\n            <p>pressure: {props.data.pressure}</p>\r\n            <p>humidity: {props.data.humidity}</p>\r\n            <p>wind speed: {props.data.windSpeed}</p>\r\n        </div> }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Info;","import React from \"react\";\r\nimport \"./../App.css\"\r\n\r\nlet Weather = (props) =>{\r\n    return(\r\n       <div className=\"myWeatherApp\">\r\n           My weather app\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","export const getData = (state) => {\r\n    if (state.data.selected === 'OpenWeatherMap'){\r\n        return state.data.OpenWeatherMap.data\r\n    }   \r\n    if (state.data.selected === 'Weatherbit'){\r\n        return state.data.Weatherbit.data\r\n    }\r\n    else return state.data.OpenWeatherMap.data\r\n}","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { getWeatherFromOpenWeatherMap, changeCity, getWeatherFromWeatherbit, changeSelected } from \"../redux/weatherData\";\r\nimport Form from \"./Form\";\r\nimport Weather from \"./Weather\";\r\nimport Info from \"./Info\";\r\nimport { getData } from \"../redux/selectors\";\r\nimport '../App.css'\r\n\r\nlet WeatherApp = (props) => {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className='main'>\r\n                <div className=\"row\">\r\n                    <div className=\"info\">\r\n                        <Info data={props.data} />\r\n                    </div>\r\n                    <div className=\"form\">\r\n                        <Form getWeatherFromOpenWeatherMap={props.getWeatherFromOpenWeatherMap}\r\n                            city={props.city} changeCity={props.changeCity}\r\n                            getWeatherFromWeatherbit={props.getWeatherFromWeatherbit}\r\n                            changeSelected={props.changeSelected} \r\n                            selected={props.selected}\r\n                            temp={props.data.temp}/>\r\n                        <Weather data={props.data} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    city: state.data.city,\r\n    data: getData(state),\r\n    selected: state.data.selected,\r\n})\r\n\r\nlet mapDispatchToProps = (dispatch) => ({\r\n    getWeatherFromOpenWeatherMap: () => { dispatch(getWeatherFromOpenWeatherMap()) },\r\n    changeCity: (value) => dispatch(changeCity(value)),\r\n    getWeatherFromWeatherbit: () => { dispatch(getWeatherFromWeatherbit()) },\r\n    changeSelected: (value) => dispatch(changeSelected(value))\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherApp);","import React from 'react';\nimport './App.css';\nimport WeatherApp from './ui/WeatherApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <WeatherApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport weatherData from './weatherData';\r\n\r\nlet combinedReducers = combineReducers({\r\n    data: weatherData,\r\n})\r\n\r\nlet store = createStore(combinedReducers,applyMiddleware(thunk));\r\nwindow.store = store;\r\nexport default store ; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}